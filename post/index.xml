<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on RootAbout.com </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://rootabout.com/post/</link>
    
    
    
    <updated>Fri, 20 Apr 2012 00:00:00 UTC</updated>
    
    <item>
      <title>Admin Builder</title>
      <link>http://rootabout.com/2012/04/admin-builder/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rootabout.com/2012/04/admin-builder/</guid>
      <description>

&lt;h3 id=&#34;the-service:48eed3b58f921694933c5e61d6a0e76f&#34;&gt;The service&lt;/h3&gt;

&lt;p&gt;It looks like this:
&lt;img src=&#34;http://rootabout.com/img/screenshot1.png&#34; alt=&#34;Alt text&#34; title=&#34;Admin Builder Service&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Available at &lt;a href=&#34;http://rootabout.com/admin-builder&#34;&gt;http://rootabout.com/admin-builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is where you can add metaboxes (as many as you want, rename and position how you want, in any order that you can sort at any time), to posts and pages and add fields (textbox, textarea, select of multiple types, radio buttons, date picker, time picker, color picker, media upload button). Again, unlimited, in any order, configurable.&lt;/p&gt;

&lt;p&gt;In the top right, if you click settings, you will see the exported jSon String that you can copy and paste into the&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;wordpress-plugin:48eed3b58f921694933c5e61d6a0e76f&#34;&gt;WordPress Plugin&lt;/h3&gt;

&lt;p&gt;It looks like this:
&lt;img src=&#34;http://rootabout.com/img/screenshot2.png&#34; alt=&#34;Alt text&#34; title=&#34;Admin Builder WordPress Plugin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get it here: &lt;a href=&#34;https://wordpress.org/plugins/admin-builder/&#34;&gt;https://wordpress.org/plugins/admin-builder/&lt;/a&gt;. This needs to be installed in a wordpress site and activated. Then in the plugin settings, import the jSon string, and that&amp;rsquo;s it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a JWT token in go - tutorial, with examples</title>
      <link>http://rootabout.com/2012/04/create-a-jwt-token-in-go---tutorial-with-examples/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rootabout.com/2012/04/create-a-jwt-token-in-go---tutorial-with-examples/</guid>
      <description>

&lt;h3 id=&#34;jwt:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;JWT?&lt;/h3&gt;

&lt;p&gt;A little backstory, JWT stands for JSON Web Tokens and they are, as adequatly said on &lt;a href=&#34;https://jwt.io/&#34;&gt;https://jwt.io/&lt;/a&gt; are an open, industry standard RFC 7519 method for representing claims securely between two parties.
In short, It&amp;rsquo;s ultimately a string with 3 parts separated by dots. like partA.partB.partC&lt;/p&gt;

&lt;p&gt;For a more in depth look of JWT check out &lt;a href=&#34;https://jwt.io/introduction/&#34;&gt;https://jwt.io/introduction/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-go:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;Install go!?&lt;/h3&gt;

&lt;p&gt;This tutorial is all about going at it all the way, from start to finish on how to do what it promisses, so, the first step would be obviously to make sure go is installed.&lt;/p&gt;

&lt;p&gt;To install go, go to (see what I did there) &lt;a href=&#34;https://golang.org/&#34;&gt;https://golang.org/&lt;/a&gt; and download and install (do what it says there, on that OFFICIAL page to install go.)&lt;/p&gt;

&lt;h3 id=&#34;install-required-packages:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;Install required packages&lt;/h3&gt;

&lt;p&gt;Ok, so, we&amp;rsquo;re going to import a few packages in our example so we need to download them and include them in the example we are going to build in this tutorial.&lt;/p&gt;

&lt;p&gt;Ok, there&amp;rsquo;s actually only one package we are going to have to download and that&amp;rsquo;s &amp;ldquo;github.com/dgrijalva/jwt-go&amp;rdquo;
To download the library do this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get github.com/dgrijalva/jwt-go&lt;/code&gt; in your console.&lt;/p&gt;

&lt;p&gt;it should just output nothing. Fingers crossed that it does. If not, you got problems. FIX THEM AND CONTINUE!.&lt;/p&gt;

&lt;h3 id=&#34;create-the-go-file:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;Create the .go file&lt;/h3&gt;

&lt;p&gt;Now go and create (I did it again! I crack myself up!) a directory somewhere and create a file in it. Let&amp;rsquo;s name it test.go&lt;/p&gt;

&lt;p&gt;Open that file and start writing this. First you need the package:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then Import some stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;time&amp;quot;
  &amp;quot;github.com/dgrijalva/jwt-go&amp;quot;
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all we need for imports. Yey!&lt;/p&gt;

&lt;h3 id=&#34;the-main-code:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;The main code&lt;/h3&gt;

&lt;p&gt;Next we&amp;rsquo;re going to make the main function, that&amp;rsquo;s required, and we&amp;rsquo;re going to call our new token function in it, with a string as a parameter. We&amp;rsquo;ll name that function newToken. I know, captain obvious right?&lt;/p&gt;

&lt;p&gt;here&amp;rsquo;s the next code you need in your test.go file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  //2 variables are declared here. Token retains the string representation of the token and error retains any error that might come up
  token, error := newToken(&amp;quot;test&amp;quot;)
  //we check if there&#39;s an error
  if error != nil {
    //we print the error to the consolde screen if it exists.
     fmt.Printf(&amp;quot;Houdson, we have an error: %v\n&amp;quot;,error)
  }else{
    //if there&#39;s no error, we print the token to the screen.
    fmt.Printf(&amp;quot;We have a token, and it looks like this: %s \n&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;token-generate-function:187f3dafa16c8268ce43bb40dca8b3e5&#34;&gt;Token Generate Function&lt;/h3&gt;

&lt;p&gt;We said we where going to use the &lt;code&gt;newToken&lt;/code&gt; function to generate the token. Let&amp;rsquo;s create that function here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//generates the new token based on a given key string
func newToken(mySigningKeyStr string) (string, error) {
	mySigningKey := []byte(mySigningKeyStr)
	// Create the token
	token := jwt.New(jwt.SigningMethodHS256)
	// Set some claims
	token.Claims[&amp;quot;foo&amp;quot;] = &amp;quot;bar&amp;quot;
	token.Claims[&amp;quot;exp&amp;quot;] = time.Now().Add(time.Hour * 72).Unix()
	// Sign and get the complete encoded token as a string
	tokenString, err := token.SignedString(mySigningKey)
	return tokenString, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically you can give this function as a parameter a string. That string will be converted into bytes and used at the end, just before the function return to generate the actual token. Past that after the &lt;code&gt;func main&lt;/code&gt; end and to test your code do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run test.go&lt;/code&gt; in the console, in the place where you saved the test.go file.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! Any questions?&lt;/p&gt;

&lt;p&gt;I thought so!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validate a JWT token in go - tutorial, with example</title>
      <link>http://rootabout.com/2012/04/validate-a-jwt-token-in-go---tutorial-with-example/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rootabout.com/2012/04/validate-a-jwt-token-in-go---tutorial-with-example/</guid>
      <description>

&lt;h3 id=&#34;the-full-code:31530fea85ab7d72231b769ca8c10767&#34;&gt;The full code&lt;/h3&gt;

&lt;p&gt;So here&amp;rsquo;s what we&amp;rsquo;re dealing with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func ValidateToken(tokenString string, myToken string) (bool, error) {

	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		//checking alg
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf(&amp;quot;Unexpected signing method: %v&amp;quot;, token.Header[&amp;quot;alg&amp;quot;])
		}
		return []byte(myToken), nil
	})

	if err != nil {
		panic(err)
	}

	if !token.Valid {
		return false, nil
	}
	fmt.Printf(&amp;quot;\n\nToken is valid!\n\n&amp;quot;)

	return true, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s basically a function that we will use to validate the code. It has 2 parameters. One is the token string that we have to validate. Secondly is the token key only the server knows and that was used when generating the token.&lt;/p&gt;

&lt;h3 id=&#34;validating-the-token-checking-the-alg:31530fea85ab7d72231b769ca8c10767&#34;&gt;Validating the token, checking the alg&lt;/h3&gt;

&lt;p&gt;We need to check that the alg is what we think it is as a security vulnerability was found in a previous version of jwt go and the documentation of the library stresses about it. So, first we create 2 new variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;token, that returns the token as a interface{} object and err that is the error if something goes wrong. we pass the tokenString (the JWT token string) that we want to validate as the first paramter of the Parse method, and as the second paramteres, a annonimous function with token as a &lt;code&gt;*jwt.Token&lt;/code&gt; type paramter. Inside here is where the magic happens.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we validate the alg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//checking alg
    if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
        return nil, fmt.Errorf(&amp;quot;Unexpected signing method: %v&amp;quot;, token.Header[&amp;quot;alg&amp;quot;])
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to apply, and this is very important, the &lt;code&gt;*jwt.SigningMethodHMAC&lt;/code&gt; parameter value to the token,Method. as when the token was created the type used for the alg Header was &lt;code&gt;jwt.SigningMethodHS256&lt;/code&gt;. So we need to check for something compatible with that encription type.&lt;code&gt;*jwt.SigningMethodHMAC&lt;/code&gt; Is what we need.&lt;/p&gt;

&lt;p&gt;Of course, what happens here, if something goes wrong, the console will have an error printed. With specifics.&lt;/p&gt;

&lt;p&gt;If everything is FINE! (EVERYBODY CALM DOWN!) it should just return 2 variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return []byte(myToken), nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The token as a byte array and nil as the second parameter (that&amp;rsquo;s error)&lt;/p&gt;

&lt;h3 id=&#34;the-last-part:31530fea85ab7d72231b769ca8c10767&#34;&gt;The last part&lt;/h3&gt;

&lt;p&gt;And now it&amp;rsquo;s just the simple stuff that&amp;rsquo;s left.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re checking if there&amp;rsquo;s an error, checking if token is valid and if not, return true and nil.Should be very straight forward.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is this?</title>
      <link>http://rootabout.com/2012/04/what-is-this/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rootabout.com/2012/04/what-is-this/</guid>
      <description>&lt;p&gt;RootAbout.com is all about building tools. And it&amp;rsquo;s doing that slowly but surely starting off with a Admin Builder for WordPress admin panels, for developers. Other projects are in plan but nothing started yet. More about Admin Builder Here &lt;a href=&#34;http://www.rootabout.com/admin-builder&#34;&gt;Click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tools have been around for ever, prooving their usefulness and making life easier. The tools built here have that exact purpose, to make things, easier, faster, cheaper, more efficient. IF they are , it&amp;rsquo;s up for you to decide. Tools may be a general description, but the purpose is focused, each tool is built to do it&amp;rsquo;s job as well as we can make it to. Feel free to judge and give feedback. Whenever, wherever.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
