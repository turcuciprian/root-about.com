<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Validate on RootAbout.com </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://rootabout.com/tags/validate/</link>
    
    
    
    <updated>Fri, 20 Apr 2012 00:00:00 UTC</updated>
    
    <item>
      <title>Validate a JWT token in go - tutorial, with example</title>
      <link>http://rootabout.com/2012/04/validate-a-jwt-token-in-go---tutorial-with-example/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 UTC</pubDate>
      
      <guid>http://rootabout.com/2012/04/validate-a-jwt-token-in-go---tutorial-with-example/</guid>
      <description>

&lt;h3 id=&#34;the-full-code:31530fea85ab7d72231b769ca8c10767&#34;&gt;The full code&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;func ValidateToken(tokenString string, myToken string) (bool, error) {

	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		//checking alg
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf(&amp;quot;Unexpected signing method: %v&amp;quot;, token.Header[&amp;quot;alg&amp;quot;])
		}
		return []byte(myToken), nil
	})

	if err != nil {
		panic(err)
	}

	if !token.Valid {
		return false, nil
	}
	fmt.Printf(&amp;quot;\n\nToken is valid!\n\n&amp;quot;)

	return true, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s basically a function that we will use to validate the code. It has 2 parameters. One is the token string that we have to validate. Secondly is the token key only the server knows and that was used when generating the token.&lt;/p&gt;

&lt;h3 id=&#34;validatin-the-token-checking-the-alg:31530fea85ab7d72231b769ca8c10767&#34;&gt;validatin the token, checking the alg&lt;/h3&gt;

&lt;p&gt;We need to check that the alg is what we think it is as a security vulnerability was found in a previous version of jwt go and the documentation of the library stresses about it. So, first we create 2 new variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;token, that returns the token as a interface{} object and err that is the error if something goes wrong. we pass the tokenString (the JWT token string) that we want to validate as the first paramter of the Parse method, and as the second paramteres, a annonimous function with token as a &lt;code&gt;*jwt.Token&lt;/code&gt; type paramter. Inside here is where the magic happens.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we validate the alg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//checking alg
    if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
        return nil, fmt.Errorf(&amp;quot;Unexpected signing method: %v&amp;quot;, token.Header[&amp;quot;alg&amp;quot;])
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to apply, and this is very important, the &lt;code&gt;*jwt.SigningMethodHMAC&lt;/code&gt; parameter value to the token,Method. as when the token was created the type used for the alg Header was &lt;code&gt;jwt.SigningMethodHS256&lt;/code&gt;. So we need to check for something compatible with that encription type.&lt;code&gt;*jwt.SigningMethodHMAC&lt;/code&gt; Is what we need.&lt;/p&gt;

&lt;p&gt;Of course, what happens here, if something goes wrong, the console will have an error printed. With specifics.&lt;/p&gt;

&lt;p&gt;If everything is FINE! (EVERYBODY CALM DOWN!) it should just return 2 variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return []byte(myToken), nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The token as a byte array and nil as the second parameter (that&amp;rsquo;s error)&lt;/p&gt;

&lt;h3 id=&#34;the-last-part:31530fea85ab7d72231b769ca8c10767&#34;&gt;The last part&lt;/h3&gt;

&lt;p&gt;And now it&amp;rsquo;s just the simple stuff that&amp;rsquo;s left.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re checking if there&amp;rsquo;s an error, checking if token is valid and if not, return true and nil.Should be very straight forward.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
